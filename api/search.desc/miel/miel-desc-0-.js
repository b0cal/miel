searchState.loadedDescShard("miel", 0, "Container management subsystem.\nData capture subsystem: TCP proxying, stdio parsing, and …\nSession management core module.\nStorage subsystem\nApplication configuration structure that defines all …\nNetwork address to bind the server to.\nReturns the argument unchanged.\nCreates a new instance of <code>Configuration</code> by parsing either …\nLoads a <code>Config</code> from a TOML file and optionally replaces …\nCalls <code>U::from(self)</code>.\nIP address filtering configuration\nMaximum number of concurrent sessions allowed\nPort filtering configuration\nList of service configuration\nSession timeout duration in seconds\nStorage backend to use for persisting data.\nFile system path for data storage.\nHandles the coherence checking of the fields in a <code>Config</code> …\nEnable or disable the web user interface\nPort number for the web user interface.\nStorage backend options for the application\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCore types used by the container management subsystem.\nOrchestrates container lifecycle and bookkeeping for …\nCleans up all tracked containers, continuing on errors and …\nCleans up a specific container.\nCreates a new container for the given <code>service_config</code> and …\nReturns the argument unchanged.\nReturns a reference to an active container by id, if …\nReturns a snapshot of current counters. <code>active_count</code> is …\nCalls <code>U::from(self)</code>.\nLists the identifiers of all active containers.\nCreates a new <code>ContainerManager</code>.\nHandles obfuscation setup within containers to make them …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets up obfuscation artifacts in the container based on …\nHandle describing a specific container instance managed by …\nAggregate counters describing the current and historical …\nSupported container runtime backends.\nsystemd-nspawn based containers.\nNumber of containers currently tracked as active.\nCreation timestamp.\nNumber of operations that failed (e.g., cleanup or start …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEphemeral host port mapped to the container’s internal …\nUnique identifier for the container (e.g., …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFixed internal container port where the service listens.\nProcess handle for the runtime container process, if …\nOptional PTY master used to capture stdio from the …\nLogical service name that the container is running (e.g., …\nOptional TCP socket associated to the service connection …\nTotal number of containers successfully created since …\nCalled periodically to clean up expired sessions and …\nCleanup expired sessions manually\nManually end a session and finalize its capture\nManually trigger capture finalization for a specific …\nReturns the argument unchanged.\nGet access to the container manager for direct container …\nGet session statistics including capture information\nGet all sessions using optional filtering\nGet access to the storage backend for direct database …\nCalls <code>U::from(self)</code>.\nCalled when a connection drops or times out to ensure …\nTrigger stdio capture for a specific session\nStream recording orchestration for a single session.\nPersistence abstraction for capture artifacts.\nTCP capture: full‑duplex proxying while recording …\nCommon data types used across the data_capture subsystem.\nOrchestrates network and stdio capture for a single …\nAggregates TCP and stdio buffers into <code>CaptureArtifacts</code>, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>StreamRecorder</code> for the given <code>session_id</code> and …\nParse a unified activity log file and append its …\nTake a best‑effort PTY snapshot for stdio capture …\nStarts a full‑duplex TCP proxy between the <code>client_stream</code> …\nParse a unified container activity log file and split it …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStorage backend contract for persisted capture artifacts.\nFetch previously saved artifacts for a session.\nPersist the provided capture artifacts.\nRecords TCP traffic for one session while acting as a …\nReturns the argument unchanged.\nReturn copies of client→container, container→client, …\nCalls <code>U::from(self)</code>.\nCreate a new <code>TcpCapture</code> instance for <code>session_id</code>.\nForward data in both directions while recording bytes and …\nAggregated capture artifacts persisted after a session …\nBytes flowing from the external client to the …\nBytes flowing from the container/service back to the …\nDirection of TCP flow for captured bytes.\nData produced by the service on standard error.\nData written by the client (e.g., typed commands), i.e., …\nLogical stdio stream identifiers when parsing activity …\nData produced by the service on standard output.\nTotal capture duration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe related session identifier\nDecoded stderr text\nDecoded stdin text\nDecoded stdout text\nTimestamped sizes for STDIO chunks\nRaw TCP payload captured from client to container\nRaw TCP payload captured from container to client\nTimestamped sizes for TCP chunks\nTotal number of bytes captured across channels\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNetwork Listener Module\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA network listener that manages multiple TCP socket and …\nBinds TCP sockets to the ports specified in the service …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>NetworkListener</code> instance.\nStarts listening for incoming connections and processes …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents the current status of a session.\nSubmodule for handling active session logic.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSubmodule for session data structures and utilities.\nSubmodule for session manager implementation.\nRepresents an active session, containing the session state,\nOptional handle to the associated container, if any.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe session metadata and state.\nRecorder for capturing streaming data during the session. …\nRepresents a captured service session.\nTotal number of bytes transferred during the session\nClient socket address (IP:port)\nOptional container identifier running the service\nSession end time (UTC), if known\nReturns the argument unchanged.\nUnique identifier for the session\nCalls <code>U::from(self)</code>.\nService name inferred or configured (e.g. “ssh”, “…\nSession start time (UTC)\nFinal status of the session\nThe structure related to session management\nManually end a session and finalize its capture\nFinalizes the capture for a specific session and persists …\nReturns the argument unchanged.\nGet access to a session’s stream recorder for additional …\nGet session statistics including capture information\nCalls <code>U::from(self)</code>.\nTrigger stdio capture for a specific session if PTY is …\nSQLite-backed storage implementation using SeaORM.\nSeaORM entity models used by the database storage backend.\nFilesystem-backed storage implementation.\nHelpers for building <code>SessionFilter</code> values.\nStorage Trait\nTypes shared by storage backends.\nStorage backend that uses SQLite via SeaORM.\nReturns the argument unchanged.\nCreate or open the database using the configured storage …\nCalls <code>U::from(self)</code>.\nCreate or open the database using <code>MIEL_STORAGE_PATH</code> if …\nCreate or open the database at the specified filesystem …\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nAn iterator over the variants of Column\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nSessions table entity model.\nGenerated by sea-orm-macros\nAn iterator over the variants of PrimaryKey\nAn iterator over the variants of Relation\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nArtifacts table entity models.\nGenerated by sea-orm-macros\nByte count as 64-bit integer\nGenerated by sea-orm-macros\nClient socket address string (IP:port)\nGenerated by sea-orm-macros\nOptional container identifier\nGenerated by sea-orm-macros\nOptional RFC3339 end timestamp\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerated by sea-orm-macros\nUUID as string primary key\nInteractions table entity models.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated by sea-orm-macros\nService name (e.g. “ssh”)\nGenerated by sea-orm-macros\nRFC3339 start timestamp\nGenerated by sea-orm-macros\nSession status as string enum\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nAn iterator over the variants of Column\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nJSON-serialized <code>CaptureArtifacts</code> associated to a session.\nGenerated by sea-orm-macros\nAn iterator over the variants of PrimaryKey\nAn iterator over the variants of Relation\nBelongs to a session\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated by sea-orm-macros\nPretty/compact JSON payload\nGenerated by sea-orm-macros\nPrimary key and FK to <code>sessions.id</code>\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nAn iterator over the variants of Column\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nOrdered chunks of interaction data associated to a session.\nGenerated by sea-orm-macros\nAn iterator over the variants of PrimaryKey\nAn iterator over the variants of Relation\nBelongs to a session\nGenerated by sea-orm-macros\nGenerated by sea-orm-macros\nRaw binary data chunk\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerated by sea-orm-macros\nAuto-increment row id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated by sea-orm-macros\nForeign key to <code>sessions.id</code>\nStorage backend that writes data to the local filesystem.\nReturns the argument unchanged.\nCreate a <code>FileStorage</code> using the configured storage path. …\nCalls <code>U::from(self)</code>.\nCreate a <code>FileStorage</code> rooted at <code>base_path</code>.\nCreate a <code>FileStorage</code> using <code>MIEL_STORAGE_PATH</code> if set, …\nBuild a <code>SessionFilter</code> that matches sessions by exact …\nThe <code>Storage</code> trait defines the interface for session and …\nCleans up sessions older than the specified date and time.\nRetrieves capture artifacts for a given session.\nRetrieves all interaction data for a given session.\nRetrieves sessions, optionally filtered.\nSaves capture artifacts to the storage backend.\nSaves interaction data for a given session.\nSaves a session to the storage backend.\nCriteria for filtering session queries.\nMatch sessions by client IP address\nSessions ending at or before this time (end_time coalesces …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMatch by service name\nSessions starting at or after this time\nMatch by final session status\nGET /\nGET /sessions/:id/artifacts\nGET /sessions/:id/data\nGET /sessions\nAPI error payload\nWeb server for HTTP API and dashboard\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new WebServer instance\nStart the web server on the given port")