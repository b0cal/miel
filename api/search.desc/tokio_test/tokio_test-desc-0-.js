searchState.loadedDescShard("tokio_test", 0, "Tokio and Futures based testing utilities\nAsserts that an exact duration has elapsed since the start …\nAsserts that the expression evaluates to <code>Err</code> and returns …\nAsserts that the expression evaluates to <code>Ok</code> and returns …\nAsserts a <code>Poll</code> is pending.\nAsserts a <code>Poll</code> is ready, returning the value.\nAsserts if a poll is ready and check for equality on the …\nAsserts a <code>Poll&lt;Result&lt;...&gt;&gt;</code> is ready and <code>Err</code>, returning …\nAsserts a <code>Poll&lt;Result&lt;...&gt;&gt;</code> is ready and <code>Ok</code>, returning the …\nRuns the provided future, blocking the current thread …\nA mock type implementing <code>AsyncRead</code> and <code>AsyncWrite</code>.\nA mock stream implementing <code>Stream</code>.\nFutures task based helpers to easily test futures and …\nBuilds <code>Mock</code> instances.\nA handle to send additional actions to the related <code>Mock</code>.\nAn I/O object that follows a predefined script.\nBuild a <code>Mock</code> value according to the defined script.\nBuild a <code>Mock</code> value paired with a handle\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a new, empty <code>Builder</code>.\nSequence a <code>read</code> operation.\nSequence a <code>read</code> operation.\nSequence a <code>read</code> operation error.\nSequence a <code>read</code> operation that produces an error.\nSequence a wait.\nSequence a <code>write</code> operation.\nSequence a <code>write</code> operation.\nSequence a <code>write</code> operation error.\nSequence a <code>write</code> operation that produces an error.\nA mock stream implementing <code>Stream</code>\nA builder for <code>StreamMock</code>\nBuild the <code>StreamMock</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new empty <code>StreamMockBuilder</code>\nQueue an item to be returned by the stream\nQueue the stream to wait for a duration\nFuture spawned on a mock task that can be used to poll the …\nEnter the task context\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code> returning the inner value\nReturns <code>true</code> if the inner future has received a wake …\nIf <code>T</code> is a <code>Future</code> then poll it. This will handle pinning …\nIf <code>T</code> is a <code>Stream</code> then <code>poll_next</code> it. This will handle …\nSpawn a future into a <code>Spawn</code> which wraps the future in a …\nReturns the number of references to the task waker")