searchState.loadedDescShard("sea_orm", 0, "      crate docs build status\nAccess mode\nColumn Index, used by <code>TryGetable</code>. Implemented for <code>&amp;str</code> and …\nThe INSERT operation did not insert any valid value\nDefines the configuration options of a database\nA Database connection error\nThe generic API for a database connection that can perform …\nCursor pagination\nA trait for any type that can be turn into a cursor\nDefines a database\nThe type of database backend for real world databases. …\nHandle a database connection depending on the backend …\nDefines a database transaction, whether it is an open …\nThe same as DatabaseBackend just shorter :)\nThe same as a DatabaseConnection\nThe result of a DELETE operation\nHandles DELETE operations in a ActiveModel using …\nA derive macro to implement <code>sea_orm::ActiveEnum</code> trait for …\nThe DeriveActiveModel derive macro will implement …\nModels that a user can override\nThe DeriveColumn derive macro will implement [ColumnTrait] …\nDerive a column if column names are not in snake-case\nCreate an Entity\nThis derive macro is the ‘almighty’ macro which …\nThe DeriveIden derive macro will implement …\nDerive into an active model\nThe DeriveMigrationName derive macro will implement …\nThe DeriveModel derive macro will implement ModelTrait for …\nThe DerivePartialModel derive macro will implement […\nThe DerivePrimaryKey derive macro will implement […\nThe DeriveRelatedEntity derive macro will implement …\nThe DeriveRelation derive macro will implement …\nImplements traits for types that wrap a database value …\nThe connection to the database has been severed\nThe connection to the database has been severed\nThe INSERT statement did not have any value to insert\nCreates a new type that iterates of the variants of an …\nDefines the result of executing an operation\nConvert a query result into the corresponding Model.\nIdentifier\nThe result of an INSERT operation on an ActiveModel\nSuccessfully inserted\nDefines a structure to perform INSERT operations in an …\nIsolation level\nDefine a structure containing the numbers of items and …\nA MySQL backend\nA MySQL backend\nDefined a structure to handle pagination of a result from …\nA Trait for any type that can paginate results\nPin a Model so that stream operations can be performed on …\nA PostgreSQL backend\nA PostgreSQL backend\nDefines the result of a query operation on a Model\nThe self-referencing struct.\nEach consistent read, even within the same transaction, …\nData can’t be modified in this transaction\nSELECT statements are performed in a nonlocking fashion, …\nData can be modified in this transaction (default)\nConsistent reads within the same transaction read the …\nGet tuple from query result based on column index\nGet tuple from query result based on a list of column …\nHelper class to handle query result for 1 Model\nHelper class to handle query result for 3 Models\nHelper class to handle query result for 2 Models\nDefines a type to do <code>SELECT</code> operations through a …\nSelect operation\nSelect operation\nPerforms a raw <code>SELECT</code> operation on a model\nA Trait for any type that can perform SELECT queries\nAll statements of the current transaction can only see …\nA SQLite backend\nA SQLite backend\nDefines the sqlx::sqlite connector\nType surrogate\nDefines a sqlx SQLite pool\nCreate a SQLite database connection and pool\nCreate a SQLite database connection and pool\nDefines an SQL statement\nAny type that can build a Statement\nCreate a stream for the QueryResult\nStream query results\nAn error occurring when doing database transactions\nDefines errors for handling transaction failures\nThe self-referencing struct.\nSpawn database transaction\nTry to convert a type to a u64\nAn interface to get a value from the query result\nAn interface to get an array of values from the query …\nAn interface to get a tuple value from the query result\nThe types of results for an INSERT operation\nThe result of an update operation on an ActiveModel\nDefines an update operation\nValue variants\nCheck if the URI provided corresponds to <code>sqlite:</code> for a …\nSet the maximum amount of time to spend waiting for …\nFilter paginated result with corresponding column greater …\nFetch the paginated result\nGet all items from the Select query\nGet all items from the Select query\nGet the null variant of self\nBasically a no-op; only to satisfy trait bounds\nSelf must be <code>&amp;str</code>, return <code>None</code> otherwise\nSelf must be <code>usize</code>, return <code>None</code> otherwise\nUse ascending sort order\nFilter paginated result with corresponding column less …\nExecute SQL <code>BEGIN</code> transaction. Returns a Transaction that …\nBundle a set of SQL statements that execute together.\nExecute SQL <code>BEGIN</code> transaction with isolation level and/or …\nA getter for database dependent boolean value\nA getter for database dependent boolean value\nMethod to call in order to build a Statement\nBuild an SQL Statement\nBuild an SQL Statement\nCheck if a record exists on the ActiveModel to perform the …\nExplicitly close the database connection. See …\nExplicitly close the SQLite connection. See …\nExplicitly close the database connection\nExplicitly close the SQLite connection\nRetrieves the names of the columns in the result set\nCommit a transaction atomically\nMethod to create a DatabaseConnection on a database. This …\nAdd configuration options for the SQLite database\nIf set to <code>true</code>, the db connection pool will be created …\nSet the timeout duration when acquiring a connection\nPerform a count on the paginated results\nPerform a count on the paginated results\nGet current page number\nThe database backend this statement is constructed for. …\nNon-debug version\nHelper to get a raw SQL string from an object that impl …\nHelper to get a <code>Statement</code> from an object that impl …\nUse descending sort order\nGet a default value of self’s type\nModule for the Entity type and operations\nError types for all database operations\nExecute a DELETE operation\nExecute an insert operation, returning the last inserted id\nExecute an update operation\nExecute an delete operation and return the deleted model\nExecute an insert operation and return the inserted model …\nExecute an insert operation and return primary keys of …\nExecute an insert operation and return all inserted models\nExecute an insert operation\nExecute a Statement\nExecute a Statement on a SQLite backend\nExecute a unprepared Statement\nExecute an unprepared SQL statement on a SQLite backend\nFetch the current page\nFetch one page and increment the page counter\nFetch a specific page; page index starts from zero\nLimit result set to only first N rows in ascending order …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe method to perform a query on a Model\nCreate a SQL statement from a crate::DatabaseBackend, a …\nInstantiate a sqlx pool connection to a DatabaseConnection\nSelect a custom Model from a raw SQL Statement.\nCreate a Statement from a crate::DatabaseBackend and a raw …\nGet the maximum amount of time to spend waiting for …\nGet whether DB connections will be established when the …\nGet the timeout duration when acquiring a connection, if …\nFetch the database backend as specified in DbBackend. This …\nGet the idle duration before closing a connection, if set\nGet the maximum number of connections of the pool, if set\nGet the maximum lifetime of individual connections, if set\nGet the minimum number of connections of the pool, if set\nA helper for building SQL queries\nA helper for building SQL queries\nGet sqlx::SqlitePool\nGet whether SQLx statement logging is enabled\nGet the level of SQLx statement logging\nGet the SQLx slow statements logging settings\nGet the database URL of the pool\nSet the idle duration before closing a connection\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a Cursor that fetch any custom struct\nReturn a [Selector] from <code>Self</code> that wraps a SelectModel …\nGet the SQL statement\nGet the SQL statement\nConvert self into an async stream\nGet tuple from query result based on column index\nCheck if the connection is a test connection for the Mock …\nCheck if the connection is a test connection for the Mock …\nCheck if the URI is the same as the specified database …\nCheck if the URI is the same as the specified database …\nLimit result set to only last N rows in ascending order of …\nGet the last id after <code>AUTOINCREMENT</code> is done on the primary …\nThe id performed when AUTOINCREMENT was performed on the …\nSet the maximum number of connections of the pool\nSet the maximum lifetime of individual connections\nTypes and methods to perform metric collection\nSet the minimum number of connections of the pool\nCreate new ConnectOptions for a Database by passing in a …\nCreate a new cursor\nInstantiate a new Deleter by passing it a DeleteStatement\nInstantiate a new insert operation\nInstantiate an update using an UpdateStatement\nIncrement the page counter\nGet the total number of items\nGet the total number of items and pages\nGet the total number of pages\nThe total number of items of a paginator\nThe total number of pages of a paginator\nGet an item from the Select query\nGet an item from the Select query\nPaginate the result of a select operation.\nChecks if a connection to the database is still valid.\nChecks if a connection to the database is still valid.\nTypes and methods to perform queries\nExecute a Statement and return a collection Vec&lt;QueryResult…\nGet the results of a query returning them as a Vec&lt;…\nExecute a Statement and return a query\nGet one result from a SQL query. Returns Option::None if …\nrolls back a transaction in case error are encountered …\nGet the number of rows affected by the operation\nThe number of rows affected by the DELETE operation\nThe rows affected by the update operation\nTypes that defines the schemas of an Entity\nSets a callback to metric this connection\nSet schema search path (PostgreSQL only)\nSet the cursor ordering for another table when dealing …\nThe SQL query\nset key for sqlcipher\nEnable SQLx statement logging (default true)\nSet SQLx statement logging level (default INFO). (ignored …\nConvert ConnectOptions into sqlx::pool::PoolOptions\nSet SQLx slow statements logging level and duration …\nExecute a Statement and return a stream of results\nStream the results of executing a SQL query\nStream the results of the Select operation\nStream the results of the Select operation\nCheck if the database supports <code>RETURNING</code> syntax on insert …\nCheck if the connection supports <code>RETURNING</code> syntax on …\nCheck if the connection supports <code>RETURNING</code> syntax on …\nCheck if the database supports <code>RETURNING</code> syntax on insert …\nIf true, the connection will be pinged upon acquiring from …\nA shortcut for writing an <code>unquoted</code> identifier into a <code>String</code>…\nExecute the function inside a transaction. If the function …\nExecute the function inside a transaction. If the function …\nExecute the function inside a transaction. If the function …\nCreate a MySQL transaction\nExecute the function inside a transaction with isolation …\nExecute the function inside a transaction with isolation …\nExecute the function inside a transaction. If the function …\nAccess the underlying <code>SqliteRow</code> if we use the SQLite …\nThe method to convert the type to a u64\nGet a value from the query result with prefixed column name\nGet a value from the query result with prefixed column name\nGet a value from the query result with prefixed column name\nGet a value from the query result with an ColIdx\nJust a delegate\nGet a value from the query result with an ColIdx\nGet a value from the query result based on the order in …\nGet a value from the query result based on the order in …\nGet a value from the query result based on the order in …\nGet a value from the query result based on the order in …\nGet a value from the query result with an ColIdx\nGet a tuple value from the query result with prefixed …\nGet a tuple value from the query result with prefixed …\nGet a tuple value from the query result based on the order …\nGet a tuple value from the query result based on the order …\nGet a value from the query result with prefixed column name\nWrite a raw identifier string without quotes.\nHelpers for working with Value\nThe values for the SQL statement’s parameters\nCreate <code>Selector</code> from Statement and columns. Executing this …\nCreate <code>SelectorRaw</code> from Statement and columns. Executing …\nArity of the Primary Key\nA Rust representation of enum defined in database.\nThe Rust Value backing ActiveEnums\nA Trait for overriding the ActiveModel behavior\nA Trait for ActiveModel to perform Create, Update or …\nDefines a stateful value used in ActiveModel.\nColumn identifier consists of 2 columns\nDefines a Column for an Entity\nAPI for working with a <code>Column</code>. Mostly a wrapper of the …\nAll column types\nSeaORM’s utility methods that act on ColumnType\nThe Entity this ActiveModel belongs to\nA Trait for mapping an Entity to a database table\nAn abstract base class for defining Entities.\nAction to perform on a foreign key whenever there are …\nA Trait for implementing a QueryResult\nAn Entity has many relationships\nAn Entity has one relationship\nEnsure the identifier for an Entity can be converted to a …\nList of column identifier\nCheck the Identity of an Entity\nA Trait for any type that can be converted into an …\nAny type that can be converted into an ActiveValue\nPerforms a conversion into an Identity\nThis trait designates that an <code>Enum</code> can be iterated over. …\nSame as RelationDef\nA Trait for links between Entities\nColumn identifier consists of more than 3 columns\nThe interface for Model, implemented by data structs\nAn undefined Value\nA trait for a part of Model\nHow many columns this Primary Key comprises\nHow to map a Primary Key to a column\nA Trait for to be used to define a Primary Key.\nChecks if Entities are related\nDefines a helper to build a relation\nDefines a relationship\nDefines the relations of an Entity\nDefines the type of relationship\nA defined Value actively being set\nColumn identifier consists of 3 columns\nA Trait for any type that can be converted into an Model\nColumn identifier consists of 1 column\nA defined Value remain unchanged\nDefines an not set operation on an ActiveValue\nValue variants\nDefine the Rust type that each enum variant corresponds.\nThis has no purpose. It will be removed in the next major …\nWill be called after <code>ActiveModel::delete</code>\nWill be called after <code>ActiveModel::delete</code>\nWill be called after <code>ActiveModel::insert</code>, …\nWill be called after <code>ActiveModel::insert</code>, …\nget the name of the entity the column belongs to\nget the name of the entity the column belongs to\nConstruct a enum expression with casting\nConstruct a enum expression with casting\nPanics\nMethod to call to get the static string identity\nMethod to call to perform <code>AUTOINCREMENT</code> operation on a …\nWill be called before <code>ActiveModel::delete</code>\nWill be called before <code>ActiveModel::delete</code>\nWill be called before <code>ActiveModel::insert</code>, …\nWill be called before <code>ActiveModel::insert</code>, …\nConstruct a belongs to relation\nConstruct a belongs to relation\nMethod to get the comment for the schema, defaults to …\nMethod to get the comment for the schema, defaults to …\nSet column comment\nSet the condition type of join on expression\nSet the condition type of join on expression\nCondition type of join on expression\nCondition type of join on expression\nThis is a simplified shorthand for a more general <code>like</code> …\nThis is a simplified shorthand for a more general <code>like</code> …\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nGet the database column definition of this active enum.\nDefine a column for an Entity\nInstantiate a new ColumnDef\nThe method to call\nCreate an ActiveModel with all fields to NotSet\nCreate an ActiveValue::NotSet\nSet the default value or expression of a column\nSet the default value\nCreate an ActiveModel with all fields to …\nDelete a model from database\nDelete a model from database\nDelete an active model by its primary key\nDelete an active model by its primary key\nDelete a model\nDelete a model\nDelete a model based on primary key\nDelete a model based on primary key\nDelete many models from database\nDelete many models from database\nThis is a simplified shorthand for a more general <code>like</code> …\nThis is a simplified shorthand for a more general <code>like</code> …\nGet the name of the entity the column belongs to\nGet the name of the entity the column belongs to\nGet the enum name of the column type\nGet the enum name of the column type\nConstruct select statement to find one / all models\nConstruct select statement to find one / all models\nFind a model by primary key\nFind a model by primary key\nFind all the Entities that are linked to the Entity\nFind all the Entities that are linked to the Entity\nFind linked Models\nFind linked Models\nFind related Entities\nFind related Entities\nFind related Models\nFind related Models\nSet the name of foreign key constraint\nThe name of foreign key constraint\nThe name of foreign key constraint\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a relationship from an Entity\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExpress the relation from a table alias.\nReference to from a Column\nReference to from a Column\nMethod to map a primary key from a column in an Entity\nInstantiate a Model from a QueryResult\nTransform the error from instantiating a Model from a …\nTransform the error from instantiating a Model from a …\nTransform the error from instantiating a Model from a …\nTransform the error from instantiating a Model from a …\nReference from another Entity\nReference from another Entity\nGet a immutable ActiveValue from an ActiveModel\nGet the Value of a column from an Entity\nGet Option as reference\nGet ColumnType as reference\nGet the name of the enum if this is a enum column\nGet the primary key of the ActiveModel\nGet the primary key of the ActiveModel\nConstruct a has many relation\nConstruct a has many relation\nConstruct a has one relation\nConstruct a has one relation\nMethod to call to perform this check\nPerform an operation if the column is null\nPerform an operation if the column is null\nSet the <code>indexed</code> field  to <code>true</code>\nInsert a model into database\nInsert a model into database\nPerform an <code>INSERT</code> operation on the ActiveModel\nPerform an <code>INSERT</code> operation on the ActiveModel\nInsert many models into database\nInsert many models into database\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod to call to perform the conversion\nMethod to perform the conversion\nMethod to map a primary key to a column in an Entity\nConstruct a <code>SimpleExpr::Column</code> wrapped in <code>Expr</code>.\nConstruct a <code>SimpleExpr::Column</code> wrapped in <code>Expr</code>.\nMethod to perform the conversion\nConstruct a returning <code>Expr</code>.\nConstruct a returning <code>Expr</code>.\nConvert an owned enum variant into the corresponding value.\nConvert an owned enum variant into the corresponding value.\nCheck if a Value exists or not\nWrap the Value into a <code>ActiveValue&lt;Value&gt;</code>\nReturn <code>true</code> if any attribute of <code>ActiveModel</code> is <code>Set</code>\nReturn <code>true</code> if any attribute of <code>ActiveModel</code> is <code>Set</code>\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nCheck the state of a ActiveValue\nCheck if the ActiveValue is ActiveValue::NotSet\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nReturns true if the column is nullable\nDefines the owner of the Relation\nDefines the owner of the Relation\nCheck if the ActiveValue is ActiveValue::Set\nCheck if the ActiveValue is ActiveValue::Unchanged\nReturns true if the column is unique\nLink for an Entity\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nGet the name of the module from the invoking …\nGet the name of the module from the invoking …\nGet the name of enum\nCreate a new ActiveModel with default values. Also used by …\nCreate a new ActiveModel with default values. Also used by …\nSet the state of an ActiveValue to the not set state\nCreate an ActiveValue::NotSet\nMark the column as nullable\nMark the column as nullable\nSet custom join ON condition.\nSet custom join ON condition.\nCustom join ON condition\nCustom join ON condition\nAn operation to perform on a foreign key when a delete …\nDefines an operation to be performed on a Foreign Key when …\nDefines an operation to be performed on a Foreign Key when …\nAn operation to perform on a foreign key when an update …\nDefines an operation to be performed on a Foreign Key when …\nDefines an operation to be performed on a Foreign Key when …\nRe-export common types from the entity\nThe type of relationship defined in RelationType\nThe type of relationship defined in RelationType\nReset the value from ActiveValue::Unchanged to …\nReset the value from ActiveValue::Unchanged to …\nReset all values from ActiveValue::Unchanged to …\nReset all values from ActiveValue::Unchanged to …\nReverse this relation (swap from and to)\nInsert the model if primary key is <code>NotSet</code>, update …\nInsert the model if primary key is <code>NotSet</code>, update …\nCast value of a column into the correct type for database …\nCast value of a column into the correct type for database …\nCast value of an enum column as enum type; do nothing if …\nCast value of an enum column as enum type; do nothing if …\nMethod to get the name for the schema, defaults to …\nMethod to get the name for the schema, defaults to …\nCast column expression used in select statement. It only …\nCast column expression used in select statement. It only …\nSelect specific columns this [PartialModel] needs\nUsed when nesting these structs into each other.\nUsed when nesting these structs into each other.\nCast enum column as text; do nothing if <code>self</code> is not an …\nCast enum column as text; do nothing if <code>self</code> is not an …\nSet the Value of a column in an Entity\nCreate an ActiveValue::Set\nSet the Value into an ActiveModel, panic if failed\nSet the Value into an ActiveModel, panic if failed\n<code>Set(value)</code>, except when <code>self.is_unchanged()</code> and <code>value</code> …\nThis is a simplified shorthand for a more general <code>like</code> …\nThis is a simplified shorthand for a more general <code>like</code> …\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nGet the name of the table\nGet the TableRef from invoking the <code>self.schema_name()</code>\nGet the TableRef from invoking the <code>self.schema_name()</code>\nGet a mutable ActiveValue from an ActiveModel\nGet the mutable value an ActiveValue also setting itself …\nCheck if an entity is related to another entity\nBuild a relationship to an Entity\nReference to another column\nReference to another column\nReference to another ENtity\nReference to another ENtity\nConvert enum variant into the corresponding value.\nGet the inner value, unless <code>self</code> is NotSet.\nTry to convert the corresponding value into enum variant.\nFor getting an array of enum. Postgres only\nMethod to call to perform the conversion\nSet the Value into an ActiveModel, return error if failed.\nSet the Value into an ActiveModel, return error if failed.\nCreate an ActiveValue::Unchanged\nMarks the column as <code>UNIQUE</code>\nGet an owned value of the ActiveValue\nUpdate a model in database\nUpdate a model in database\nPerform the <code>UPDATE</code> operation on an ActiveModel\nPerform the <code>UPDATE</code> operation on an ActiveModel\nUpdate many models in database\nUpdate many models in database\nGet the name of all enum variants\nGet the name of all enum variants\nCheck if an entity is related through another entity\nCheck if an entity is related through another entity\nAll column types\nA derive macro to implement <code>sea_orm::ActiveEnum</code> trait for …\nThe DeriveActiveModel derive macro will implement …\nModels that a user can override\nThe DeriveColumn derive macro will implement [ColumnTrait] …\nDerive a column if column names are not in snake-case\nCreate an Entity\nThis derive macro is the ‘almighty’ macro which …\nThe DeriveIden derive macro will implement …\nDerive into an active model\nThe DeriveModel derive macro will implement ModelTrait for …\nThe DerivePartialModel derive macro will implement […\nThe DerivePrimaryKey derive macro will implement […\nThe DeriveRelatedEntity derive macro will implement …\nThe DeriveRelation derive macro will implement …\nImplements traits for types that wrap a database value …\nCreates a new type that iterates of the variants of an …\nHelper to build a <code>SimpleExpr</code>.\nIdentifier\nString size\nA reference counted pointer: either <code>Rc</code> or <code>Arc</code>, depending …\nLength for var-char/binary; default to 255\nValue variants\nExpress an arithmetic addition operation.\nExpress a <code>ALL</code> sub-query expression.\nExpress a <code>ANY</code> sub-query expression.\nExpress a <code>AS enum</code> expression.\nExpress a <code>BETWEEN</code> expression.\nCreate any binary operation\nAdds new <code>CASE WHEN</code> to existing case statement.\nExpress a <code>CAST AS</code> expression.\nExpress the target column without table prefix.\nExpress the target column without table prefix, returning …\nExpress a <code>COUNT</code> function.\nExpress a <code>COUNT</code> function with the DISTINCT modifier.\nKeyword <code>CURRENT_DATE</code>.\nKeyword <code>CURRENT_TIMESTAMP</code>.\nKeyword <code>CURRENT_TIMESTAMP</code>.\nExpress any custom expression in <code>&amp;str</code>.\nExpress any custom expression with <code>SimpleExpr</code>. Use this if …\nExpress any custom expression with <code>SimpleExpr</code>. Use this if …\nExpress any custom expression with <code>Value</code>. Use this if your …\nCustom keyword.\nExpress an arithmetic division operation.\nExpress an equal (<code>=</code>) expression.\nExpress a equal expression between two table columns, you …\nExpress a <code>EXISTS</code> sub-query expression.\nWrap an expression to perform some operation on it later.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExpress a greater than (<code>&gt;</code>) expression.\nExpress a greater than or equal (<code>&gt;=</code>) expression.\nExpress a <code>IF NULL</code> function.\nExpress a <code>IN</code> sub-query expression.\nExpress a <code>IN</code> sub expression.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExpress a <code>IS</code> expression.\nExpress a <code>IN</code> expression.\nExpress a <code>IS NOT</code> expression.\nExpress a <code>NOT IN</code> expression.\nExpress a <code>IS NOT NULL</code> expression.\nExpress a <code>IS NULL</code> expression.\nExpress a bitwise left shift.\nExpress a <code>LIKE</code> expression.\nExpress a less than (<code>&lt;</code>) expression.\nExpress a less than or equal (<code>&lt;=</code>) expression.\nExpress a <code>MAX</code> function.\nExpress a <code>MIN</code> function.\nExpress an arithmetic modulo operation.\nExpress an arithmetic multiplication operation.\nExpress a not equal (<code>&lt;&gt;</code>) expression.\nNegates an expression with <code>NOT</code>.\nExpress a <code>NOT BETWEEN</code> expression.\nExpress a not equal expression between two table columns, …\nExpress a <code>NOT IN</code> sub-query expression.\nExpress a <code>NOT LIKE</code> expression.\nExpress a bitwise right shift.\nExpress a <code>SOME</code> sub-query expression.\nExpress an arithmetic subtraction operation.\nExpress a <code>SUM</code> function.\nA shortcut for writing an <code>unquoted</code> identifier into a <code>String</code>…\nWraps tuple of <code>SimpleExpr</code>, can be used for tuple comparison\nWrite a raw identifier string without quotes.\nExpress a <code>Value</code>, returning a <code>Expr</code>.\nExpress a <code>Value</code>, returning a <code>SimpleExpr</code>.\nError occurred within the <code>Any</code> driver mapping to/from the …\nThrown by <code>TryFrom&lt;ActiveModel&gt;</code>, which assumes all …\nError occurred while decoding a value from a specific …\nError during <code>impl FromStr for Entity::Column</code>\nColumn index was out of bounds.\nNo column found for the given name.\nError occurred while parsing a connection string.\nThere was a problem with the database connection\nConnection Acquire error\nThis error can happen when the connection pool is …\nConnection closed\nType error: the specified type cannot be converted from …\nA custom error\nError returned from the database.\nAn error from unsuccessful database operations\nA database error was encountered as defined in crate::DbErr\nError occurred while decoding a value.\nError occured while encoding a value.\nAn operation did not execute successfully\nError for Foreign key constraint\nError generated from within SeaORM\nOne or more of the arguments to the called function was …\nError communicating with the database backend.\nError occurred while parsing json value as target type\nA migration error\nA null value was encountered\n<code>Pool::close</code> was called while we were waiting in …\nA <code>Pool::acquire</code> timed out due to connections not becoming …\nUnexpected or invalid data encountered while communicating …\nAn error occurred while performing a query\nThe record was not found in the database\nNone of the records are inserted, that probably means all …\nNone of the records are updated, that means a WHERE …\nNo rows returned by a query that expected to return at …\nRuntime error\nAn error from unsuccessful SQL query\nRepresents all the ways a method can fail within SQLx.\nSQLx Error\nConnection pool timed out\nError occurred while attempting to establish a TLS …\nAn error from trying to get a row from a Model\nRuntime type conversion error\nError occurred while parsing value as target type\nType in query doesn’t exist. Likely due to typo or …\nError for duplicate record in unique field or primary key …\nAfter an insert statement it was impossible to retrieve …\nWhen updating, a model should know its primary key to check\nA background worker has crashed.\nThe extended result code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert generic DbErr by sqlx to SqlErr, return none if …\nFrom type\nInto type\nTryError\nQuery execution infos\nQuery executiuon duration\nQuery execution failed\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery data\nExtending IntoSimpleExpr to support casting ActiveEnum as …\nRepresents the value of an <code>Condition::any</code> or <code>Condition::all</code>…\nThis structure provides debug capabilities\nDefines the structure for a delete operation\nPerform a delete operation on multiple models\nPerform a delete operation on a model\nEntity, or a Select; to be used as parameters in …\nPerforms INSERT operations on a ActiveModel\nPerforms a conversion to SimpleExpr\nJoin types\nThis trait implements the Data Loader API\nSource model\nOrdering options\nPerform a FILTER opertation on a statement\nPerforms ORDER BY operations\nAbstract API for performing queries\nConstrain the QueryStatement to QueryStatementBuilder trait\nA Trait for any type performing queries on a Model or …\nDefines a structure to perform select operations\nImplements the traits Iden and IdenStatic for a type\nImplements the traits Iden and IdenStatic for a type\nImplements the traits Iden and IdenStatic for a type\nSelect specific column for partial model queries\nDefines a structure to perform a SELECT operation on two …\nDefines a structure to perform a SELECT operation on two …\nDefines a structure to perform a SELECT operation on many …\nPerforms INSERT operations on a ActiveModel, will do …\nDefines a structure to perform UPDATE query operations on …\nDefines an UPDATE operation on multiple ActiveModels\nDefines an UPDATE operation on one ActiveModel\nValue variants\nAdd a condition to the set.\nAdd a Model to Self\nAdd many Models to Self\nAdd many Models to Self. This is the legacy implementation …\nAdd an optional condition to the set.\nCreate a condition that is false if any of the conditions …\nGet all Models from the SELECT query\nGet all Models from the Select query\nGet all Models from the select operation\nGet all Models from the Select query\nLeft Join with an Entity Related to the second Entity\nAnd where condition. Calling <code>or_where</code> after <code>and_where</code> will …\nAnd where condition. Calling <code>or_where</code> after <code>and_where</code> will …\nOptional and where, short hand for …\nOptional and where, short hand for …\nCreate a condition that is true if any of the conditions …\nApply an operation on the QueryTrait::QueryStatement if …\nApply an operation on the QueryTrait::QueryStatement if …\nGet an immutable ref to the query builder\nApply a where condition using the model’s primary key\nApply a where condition using the model’s primary key\nPerform a check to determine table belongs to a Model …\nPerform a check to determine table belongs to a Model …\nBuild the query as <code>Statement</code>\nBuild the query as <code>Statement</code>\nThis macro builds a Statement when invoked\nThis macro builds a Statement when invoked\nThis macro builds a Statement when invoked\nThis macro builds a Statement when invoked\nClear order expressions\nCreates a SimpleExpr from a column\nAdd a select column\nAdd a select column\nAdd a select column with alias\nAdd a select column with alias\nSelect columns\nSelect columns\nWhere condition, expressed with <code>any</code> and <code>all</code>. Calling …\nConvert into a cursor\nConvert into a cursor using column of first entity\nConvert into a cursor using column of first entity\nConvert into a cursor using column of second entity\nHelper to get a raw SQL string from an object that impl …\nHelper to get a <code>Statement</code> from an object that impl …\nAdd a DISTINCT expression\nAdd a DISTINCT expression\nAdd a DISTINCT ON expression NOTE: this function is only …\nAdd a DISTINCT ON expression NOTE: this function is only …\nAllow insert statement to return without error if nothing…\nExecute a DELETE operation on one ActiveModel\nExecute a DELETE operation on many ActiveModels\nExecute an insert operation\nExecute an insert operation\nExecute an update operation on an ActiveModel\nExecute an update operation on multiple ActiveModels\nExecute an delete operation and return the deleted model\nExecute an delete operation and return the deleted model\nExecute an insert operation and return the inserted model …\nExecute an insert operation and return the inserted model …\nExecute an update operation and return the updated model …\nExecute an insert operation and return primary keys of …\nExecute an insert operation and return primary keys of …\nExecute an insert operation and return all inserted models\nExecute an insert operation and return all inserted models\nExecute an insert operation without returning (don’t use …\nExecute an insert operation without returning (don’t use …\nAdd an expression to the select expression list.\nAdd an expression to the select expression list.\nSelect column.\nSelect column.\nSame as <code>expr_as</code>. Here for legacy reasons.\nSame as <code>expr_as</code>. Here for legacy reasons.\nAdd select expressions from vector of <code>SelectExpr</code>.\nAdd select expressions from vector of <code>SelectExpr</code>.\nAdd an AND WHERE expression\nAdd an AND WHERE expression\nLeft Join with a Linked Entity and select both Entity.\nLeft Join with a Related Entity and select both Entity.\nLeft Join with an Entity Related to the first Entity\nLeft Join with a Linked Entity and select Entity as a <code>Vec</code>.\nLeft Join with a Related Entity and select the related …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPerform a Select operation on a Model using a Statement\nAdd a group by column\nAdd a group by column\nAdd an AND HAVING expression\nAdd an AND HAVING expression\nInner Join with a Related Entity.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCasting ActiveEnum as TEXT in select expression, otherwise …\nReturn a Selector from <code>Self</code> that wraps a SelectModel\nPerform a conversion into a SelectTwoModel\nPerform a conversion into a SelectThreeModel\nReturn a Selector from <code>Self</code> that wraps a SelectModel with …\nPerform a conversion into a SelectTwoModel with …\nPerform a conversion into a SelectThreeModel with …\nTake ownership of the query builder\nMethod to perform the conversion\nWhether or not any condition has been added\nJoin via <code>RelationDef</code>.\nJoin via <code>RelationDef</code>.\nJoin via <code>RelationDef</code> with table alias.\nJoin via <code>RelationDef</code> with table alias.\nJoin via <code>RelationDef</code> with table alias but in reverse …\nJoin via <code>RelationDef</code> with table alias but in reverse …\nJoin via <code>RelationDef</code> but in reverse direction. Assume when …\nJoin via <code>RelationDef</code> but in reverse direction. Assume when …\nLeft Join with a Related Entity.\nHow many conditions were added\nAdd a limit expression. Passing in None would remove the …\nAdd a limit expression. Passing in None would remove the …\nUsed to eager load has_many relations\nUsed to eager load many_to_many relations\nUsed to eager load has_one relations\nSelect lock\nSelect lock\nSelect lock exclusive\nSelect lock exclusive\nSelect lock shared\nSelect lock shared\nRow locking with behavior (if supported).\nRow locking with behavior (if supported).\nDelete many ActiveModel\nInsert many Model or ActiveModel\nUpdate many ActiveModel\nNegates a condition.\nAdd an offset expression. Passing in None would remove the …\nAdd an offset expression. Passing in None would remove the …\nOn conflict\nSet ON CONFLICT on primary key do nothing, but with MySQL …\nAlias to <code>do_nothing</code>\nDelete one Model or ActiveModel\nInsert one Model or ActiveModel\nGet one Model from the SELECT query\nGet one Model from the Select query\nGet one Model from the Select query\nUpdate one ActiveModel\nOrder by column.\nOrder by column.\nAdd an order_by expression\nAdd an order_by expression\nAdd an order_by expression (ascending)\nAdd an order_by expression (ascending)\nOrder by vector of columns.\nOrder by vector of columns.\nOrder by vector of columns with nulls order option.\nOrder by vector of columns with nulls order option.\nOrder by custom string.\nOrder by custom string.\nOrder by custom string with nulls order option.\nOrder by custom string with nulls order option.\nAdd an order_by expression (descending)\nAdd an order_by expression (descending)\nOrder by <code>SimpleExpr</code>.\nOrder by <code>SimpleExpr</code>.\nOrder by <code>SimpleExpr</code> with nulls order option.\nOrder by <code>SimpleExpr</code> with nulls order option.\nOrder by column with nulls order option.\nOrder by column with nulls order option.\nAdd an order_by expression with nulls ordering option\nAdd an order_by expression with nulls ordering option\nAdd the select SQL statement\nAdd the query to perform an ORDER BY operation\nAdd the query to perform a FILTER on\nGet a mutable ref to the query builder\nThe query to debug\nJoin with an Entity Related to me.\nRight Join with a Related Entity.\nIf self is Entity, use Entity::find()\nSelects extra Entity and returns it together with the …\nSelects extra Entity and returns it together with the …\nAdd a select column\nAdd a select column with alias\nClear the selection list\nClear the selection list\nMakes a SELECT operation in conjunction to another relation\nAdd the models to update to Self\nStream the results of a SELECT operation on a Model\nStream the results of a Select operation on a Model\nStream the result of the operation\nStream the results of a Select operation on a Model\nStream the result of the operation with PartialModel\nStream the result of the operation with PartialModel\nStream the result of the operation with PartialModel\nStream the result of the operation with PartialModel\nShorthand of <code>expr_as(Expr::col((T, C)), A)</code>.\nShorthand of <code>expr_as(Expr::col((T, C)), A)</code>.\nThe value of the query\nThis is a helper struct to convert <code>EntityTrait</code> into …\nCreates Postgres enums from an ActiveEnum. See …\nCreates Postgres enums from an Entity. See …\nCreates the indexes from an Entity, returning an empty Vec …\nCreates a table from an Entity. See TableCreateStatement …\nReturns the argument unchanged.\nCreates a column definition for example to update a table.\nCalls <code>U::from(self)</code>.\nCreate a helper for a specific database backend\nDefault value for T\nDefault value for Option\nDefault value for types that’s not nullable\nThe owned value type\n<code>Default::default()</code> if implemented, dummy value otherwise\nAlways <code>None</code>\nAlways <code>NotSet</code>")