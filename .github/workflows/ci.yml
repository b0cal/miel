name: CI

on:
  pull_request:
    paths-ignore:
      - "docs/**"
  push:
    branches: [main, dev]
    paths-ignore:
      - "docs/**"
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: davidB/rust-cargo-make@v1
      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            src/core -> src/core/target
      - uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-tools-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-tools-
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: src/webui/package-lock.json

      - name: Install cargo-audit if missing
        run: if ! command -v cargo-audit >/dev/null 2>&1; then cargo install cargo-audit; fi

      - name: Install global npm dependencies
        run: npm install -g markdownlint-cli2

      - name: Install npm dependencies
        run: npm ci --prefix src/webui

      - name: Lint and format code
        run: cargo make code-quality

      - name: Audit source code
        run: cargo make audit

      - name: Run CodeQL security analysis
        uses: github/codeql-action/init@v3
        with:
          languages: rust, javascript

      - name: Build for CodeQL analysis
        run: cargo make prod

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  test:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: davidB/rust-cargo-make@v1
      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            src/core -> src/core/target
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: src/webui/package-lock.json

      - name: Run Rust tests
        run: cargo make core-test

      - name: Run NodeJS tests
        run: cargo make webui-test

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: davidB/rust-cargo-make@v1
      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            src/core -> src/core/target
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: src/webui/package-lock.json

      - name: Build production binary
        run: cargo make prod

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: src/core/target/release/miel

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Extract version from Cargo.toml
        id: cargo_version
        run: |
          version=$(grep '^version' src/core/Cargo.toml | head -n1 | awk -F\" '{print $2}')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Check if version was bumped
        id: version_check
        run: |
          current_version="${{ steps.cargo_version.outputs.version }}"
          echo "Current version: $current_version"
          
          # Get the latest tag, if any exists
          latest_tag=$(git tag -l "v*" --sort=-version:refname | head -n1)
          
          if [ -z "$latest_tag" ]; then
            echo "No previous tags found, proceeding with first release"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            # Extract version from tag (remove 'v' prefix)
            latest_version="${latest_tag#v}"
            echo "Latest tagged version: $latest_version"
            
            # Check if current version is greater than latest version
            if [ "$current_version" = "$latest_version" ]; then
              echo "❌ Version $current_version already exists as tag $latest_tag"
              echo "Please bump the version in Cargo.toml before merging to main"
              echo "should_release=false" >> $GITHUB_OUTPUT
              exit 1
            elif printf '%s\n%s\n' "$latest_version" "$current_version" | sort -V -C; then
              echo "✅ Version bumped from $latest_version to $current_version"
              echo "should_release=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Version $current_version is not greater than latest version $latest_version"
              echo "Please ensure you're bumping the version correctly (following semver)"
              echo "should_release=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: Create and push tag
        if: steps.version_check.outputs.should_release == 'true'
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          tag_name="v${{ steps.cargo_version.outputs.version }}"
          
          # Double-check tag doesn't exist remotely
          if git ls-remote --tags origin | grep -q "refs/tags/$tag_name$"; then
            echo "❌ Tag $tag_name already exists on remote"
            exit 1
          fi
          
          git tag "$tag_name"
          git push https://x-access-token:${GH_PAT}@github.com/${GITHUB_REPOSITORY}.git "$tag_name"
          echo "✅ Successfully created and pushed tag $tag_name"
